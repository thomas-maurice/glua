apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "glua-webhook.fullname" . }}-scripts
  labels:
    {{- include "glua-webhook.labels" . | nindent 4 }}
data:
  mutate.lua: |
    -- mutate.lua: Simplified Lua mutation script for Kubernetes pods
    --
    -- This script demonstrates how to use the kubernetes module's helper functions
    -- to easily mutate pods without dealing with complex JSON patch operations.
    --
    -- Global variables available:
    --   pod: the Kubernetes Pod object as a Lua table
    --   patches: empty table to populate with JSON patch operations
    --   kubernetes: the kubernetes module with helper functions

    local k8s = require("kubernetes")

    -- Log what we're mutating
    print(string.format("Mutating pod: %s/%s",
        pod.metadata.namespace or "default",
        pod.metadata.name or "unknown"))

    -- Initialize metadata.annotations if it doesn't exist
    -- This uses the kubernetes module helper to ensure the structure exists
    pod = k8s.init_defaults(pod)

    -- Now we can safely add annotations using the helper function
    pod = k8s.add_annotation(pod, "coucou.lil", "hello")
    pod = k8s.add_annotation(pod, "glua.mutated-at", os.date("%Y-%m-%dT%H:%M:%SZ"))

    -- The kubernetes module helpers have already created the necessary patches
    -- We just need to generate the JSON patches for the annotations we added

    -- Generate patches for the annotations
    -- Since we're using the helpers, we know annotations exist now
    for key, value in pairs(pod.metadata.annotations) do
        -- Only patch annotations we just added (not existing ones)
        if key == "coucou.lil" or key == "glua.mutated-at" then
            local escaped_key = key:gsub("~", "~0"):gsub("/", "~1")
            table.insert(patches, {
                op = "add",
                path = "/metadata/annotations/" .. escaped_key,
                value = value
            })
        end
    end

    print(string.format("Generated %d patches", #patches))
